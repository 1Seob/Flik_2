generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())

  name                  String                  @unique
  birthday              DateTime?
  gender                Gender?
  profileImagePath      String?                 @map("profile_image_path")

  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  deletedAt             DateTime?               @map("deleted_at")

  bookLikes             BookLike[]
  bookSaves             BookSave[]
  review                Review[]
  reviewLikes           ReviewLike[]
  readingLog            ReadingLog[]
  challengesOwned       Challenge[]    @relation("ChallengeOwner")
  joins                 Participant[]
  notifications         Notification[]

  @@map("user")
}

model Book {
  id                    Int                     @id @default(autoincrement())

  title                 String
  author                String

  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  deletedAt             DateTime?               @map("deleted_at")

  views                 Int                     @default(0)
  totalPagesCount       Int                     @default(0)
  isbn                  String?

  likedBy               BookLike[]
  savedBy               BookSave[]
  review                Review[]
  pages                 Page[]
  logs                  ReadingLog[]
  challenges            Challenge[]

  @@map("book")
}

model BookLike {
  id     Int  @id @default(autoincrement())
  userId String
  bookId Int
  book   Book @relation(fields: [bookId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
  @@map("book-like")
}

model BookSave {
  id     Int  @id @default(autoincrement())
  userId String
  bookId Int
  book   Book @relation(fields: [bookId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
  @@map("book-save")
}

model Review {
  id           Int       @id @default(autoincrement())
  userId       String
  bookId       Int
  content      String
  
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  likedBy      ReviewLike[]

  book         Book      @relation(fields: [bookId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@map("review")
}

model ReviewLike {
  id           Int       @id @default(autoincrement())
  userId       String
  reviewId     Int

  user         User      @relation(fields: [userId], references: [id])
  review       Review    @relation(fields: [reviewId], references: [id])

  @@unique([userId, reviewId])

  @@map("review-like")
}

model Page {
  id                    Int                     @id @default(autoincrement())
  content               String
  number                Int
  bookId                Int

  book                  Book                    @relation(fields: [bookId], references: [id])

  readingLog            ReadingLog[]

  @@map("page")
}

model ReadingLog {
  id              Int           @id @default(autoincrement())

  userId          String        @map("user_id")
  bookId          Int           @map("book_id")
  pageId          Int           @map("page_id")

  pageNumber      Int           @map("page_number")

  participantId Int?          @map("participant_id")             

  startedAt       DateTime?     @default(now())    @map("started_at")
  endedAt         DateTime?                        @map("ended_at")
  durationSec     Int?                             @map("duration_sec")

  user      User       @relation(fields: [userId], references: [id])
  book      Book       @relation(fields: [bookId], references: [id])
  page      Page       @relation(fields: [pageId], references: [id])
  join      Participant? @relation(fields: [participantId], references: [id])

  @@index([userId, startedAt])
  @@index([userId, endedAt])
  @@index([userId, bookId, startedAt])

  // 페이지 단위 조회
  @@index([bookId, pageId, startedAt])

  // 챌린지 전용 조회(랭킹/진척)
  @@index([participantId, startedAt])

  @@map("reading-log")
}

model Challenge {
  id            Int                @id @default(autoincrement())
  name          String                                 @map("name")              
  ownerUserId   String                                 @map("owner_user_id")
  imagePath     String?                                @map("image_path")
  bookId        Int                                    @map("book_id")
  capacity      Int
     
  visibility    ChallengeVisibility  @map("visibility") 

  startAt       DateTime                               @map("start_at")
  endAt         DateTime                               @map("end_at")

  completedAt   DateTime?                               @map("completed_at")
  createdAt     DateTime             @default(now())    @map("created_at")
  status        ChallengeStatus     

  book   Book @relation(fields: [bookId], references: [id])
  owner  User @relation("ChallengeOwner", fields: [ownerUserId], references: [id])
  joins  Participant[]

  @@index([visibility, status, startAt])
  @@index([bookId])
  @@index([ownerUserId])
  @@map("challenge")
}

model Participant {
  id              Int       @id @default(autoincrement())
  challengeId     Int       @map("challenge_id")
  userId          String    @map("user_id")

  joinedAt        DateTime  @default(now()) @map("joined_at")

  leftAt          DateTime? @map("left_at")             
  status          ParticipantStatus  @map("status") 

  challenge  Challenge    @relation(fields: [challengeId], references: [id])
  user       User         @relation(fields: [userId], references: [id])

  logs       ReadingLog[]


  @@unique([challengeId, userId])        // 중복 참가 방지
  @@index([userId])
  
  @@map("participant")
}

model Notification {
  id           Int                  @id @default(autoincrement())
  userId       String               @map("user_id")
  targetType   NotificationTarget   @map("target_type")
  targetId     Int                  @map("target_id")       

  enabled      Boolean              @default(true)  @map("enabled")
  muted        Boolean              @default(false) @map("muted")

  minuteOfDay  Int?                 @map("minute_of_day")    // 0..1439 (현지 기준)

  lastNotifiedAt DateTime?          @map("last_notified_at")

  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt      @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, targetType, targetId])

  @@index([enabled])
  @@index([userId, targetType, targetId])

  @@map("notification")
}

// ── enums ───────────────────────────────────────────────

enum Gender {
  MALE   @map("MALE")
  FEMALE @map("FEMALE")
}

enum ChallengeVisibility {
  PUBLIC
  PRIVATE
}

enum ChallengeStatus {
  PREPARING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ParticipantStatus {
  JOINED     // 정상 참여 중
  LEFT       // 자의/강제 이탈
}

enum NotificationTarget {
  CHALLENGE
}
